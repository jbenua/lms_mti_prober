{
    "Какой метод разработки структуры программы предполагает, что каждый запрограммированный модуль начинают сразу же тестировать до перехода к программированию другого модуля?":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "метод восходящей реализации": "0",
            "метод нисходящей разработки": "0",
            "метод восходящей разработки": "0",
            "метод нисходящей реализации": "1"
        },
        "answers": ["метод восходящей реализации", "метод нисходящей реализации", "метод нисходящей разработки", "метод восходящей разработки"]
    },
    "Кто является действующим субъектом при моделировании вариантов использования программного обеспечения?":
    {
        "multi": False,
        "iter": 1,
        "result":
        {
            "человек, который будет контролировать создаваемую систему": "0",
            "человек, который будет реально работать с создаваемой системой": "1",
            "человек, являющийся одним из создателей системы": "0"
        },
        "answers": ["человек, который будет контролировать создаваемую систему", "человек, являющийся одним из создателей системы", "человек, который будет реально работать с создаваемой системой"]
    },
    "Что на диаграмме последовательностей показывают линия жизни?":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "показывает связь данного объекта с классами": "0",
            "показывает, когда объект начинает и заканчивает свое существование": "1",
            "показывает момент времени, когда объект был создан": "0"
        },
        "answers": ["показывает, когда объект начинает и заканчивает свое существование", "показывает связь данного объекта с классами", "показывает момент времени, когда объект был создан"]
    },
    "Кто обычно инициирует вариант использования?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "действующий субъект": "1",
            "разработчики программного обеспечения": "0",
            "заказчики программного обеспечения": "0"
        },
        "answers": ["разработчики программного обеспечения", "действующий субъект", "заказчики программного обеспечения"]
    },
    "В чем состоит статический контроль структуры программы?":
    {
        "multi": False,
        "iter": 1,
        "result":
        {
            "в оценке структуры программы, именно насколько хорошо программа разбита на модули с учетом значений основных характеристик модуля": "1",
            "в контроле архитектуры и внешнего описания программного средства со стороны разработчиков": "0",
            "в мысленном прокручивании (проверке) структуры программы при выполнении заранее разработанных тестов": "0"
        },
        "answers": ["в мысленном прокручивании (проверке) структуры программы при выполнении заранее разработанных тестов", "в контроле архитектуры и внешнего описания программного средства со стороны разработчиков", "в оценке структуры программы, именно насколько хорошо программа разбита на модули с учетом значений основных характеристик модуля"]
    },
    "На какой стадии создания системы с помощью вариантов использования должно быть описано все, что должна делать эта система?":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "на стадии ее разработки": "1",
            "на стадии ее проектирования": "0",
            "на стадии ее передачи": "0"
        },
        "answers": ["на стадии ее разработки", "на стадии ее передачи", "на стадии ее проектирования"]
    },
    "Что такое рутинность модуля?":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "мера его зависимости по данным от других модулей": "0",
            "его независимость от предыстории обращений к нему": "1",
            "мера его внутренних связей": "0"
        },
        "answers": ["его независимость от предыстории обращений к нему", "мера его внутренних связей", "мера его зависимости по данным от других модулей"]
    },
    "Как называется любой фрагмент описания процесса, оформляемый как самостоятельный программный продукт, пригодный для использования в описаниях разных процессов?":
    {
        "multi": False,
        "iter": 8,
        "result":
        {
            "программный модуль": "1",
            "программный элемент": "0",
            "программный класс": "0",
            "программная архитектура": "0"
        },
        "answers": ["программный модуль", "программный класс", "программная архитектура", "программный элемент"]
    },
    "Архитектурный подход к разработке программы представляет собой":
    {
        "multi": False,
        "iter": 1,
        "result":
        {
            "модификацию нисходящей разработки, при которой модульная древовидная структура программы формируется в процессе программирования (кодирования) модулей": "0",
            "модификацию конструктивной разработки, при которой модульная структура программы формируется в процессе программирования (кодирования) модуля": "0",
            "модификацию восходящей разработки, при которой модульная структура программы формируется в процессе программирования (кодирования) модуля": "1"
        },
        "answers": ["модификацию нисходящей разработки, при которой модульная древовидная структура программы формируется в процессе программирования (кодирования) модулей", "модификацию конструктивной разработки, при которой модульная структура программы формируется в процессе программирования (кодирования) модуля", "модификацию восходящей разработки, при которой модульная структура программы формируется в процессе программирования (кодирования) модуля"]
    },
    "Чем измеряется размер программного модуля?":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "числом содержащихся в нём операторов или строк": "1",
            "числом его внутренних связей": "0",
            "объемом полученного файла": "0"
        },
        "answers": ["числом содержащихся в нём операторов или строк", "объемом полученного файла", "числом его внутренних связей"]
    },
    "Как называется метод, при котором обход дерева программы производится с целью кратчайшим путем реализовать тот или иной вариант (сначала самый простейший) нормально действующей реализации?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "целенаправленная конструктивная реализация": "1",
            "классическая восходящая реализация": "0",
            "архитектурная реализация": "0"
        },
        "answers": ["классическая восходящая реализация", "целенаправленная конструктивная реализация", "архитектурная реализация"]
    },
    "Самой слабой степенью прочности обладает":
    {
        "multi": False,
        "iter": 1,
        "result":
        {
            "модуль, прочный по совпадению": "1",
            "информационно прочный модуль": "0",
            "функционально прочный модуль": "0"
        },
        "answers": ["информационно прочный модуль", "функционально прочный модуль", "модуль, прочный по совпадению"]
    },
    "Как называется контроль спецификации модулей со стороны разработчиков этих модулей?":
    {
        "multi": False,
        "iter": 8,
        "result":
        {
            "смежный контроль сверху": "0",
            "сквозной контроль": "0",
            "смежный контроль снизу": "1",
            "статический контроль": "0"
        },
        "answers": ["смежный контроль снизу", "смежный контроль сверху", "сквозной контроль", "статический контроль"]
    },
    "Как называется простой программный фрагмент, который при нисходящем тестировании сигнализирует о самом факте обращения к модулю, производит необходимую для правильной работы программы обработку значений его входных параметров (иногда с их распечаткой) и выдает, если это необходимо, заранее запасенный подходящий результат?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "имитатор модуля": "1",
            "отладочный модуль": "0",
            "тестовый модуль": "0",
            "индикатор модуля": "0"
        },
        "answers": ["отладочный модуль", "индикатор модуля", "имитатор модуля", "тестовый модуль"]
    },
    "Какой вид сцепления модулей рекомендуется для использования современной технологией программирования?":
    {
        "multi": False,
        "iter": 1,
        "result":
        {
            "параметрическое сцепление": "1",
            "сцепление по общей области": "0",
            "сцепление по содержимому": "0"
        },
        "answers": ["сцепление по содержимому", "сцепление по общей области", "параметрическое сцепление"]
    },
    "Сценарий в моделировании вариантов использования определяет":
    {
        "multi": False,
        "iter": 4,
        "result":
        {
            "применимость системы": "0",
            "цель операции": "0",
            "способ достижения цели операции": "1"
        },
        "answers": ["способ достижения цели операции", "применимость системы", "цель операции"]
    },
    "Сквозной контроль является видом":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "статистического контроля": "0",
            "смешанного контроля": "0",
            "динамического контроля": "1",
            "статического контроля": "0"
        },
        "answers": ["статистического контроля", "статического контроля", "динамического контроля", "смешанного контроля"]
    },
    "Как называется класс поддержки экрана пользовательского интерфейса?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "userWindows": "0",
            "userList": "0",
            "totalInterface": "0",
            "userInterface": "1"
        },
        "answers": ["userWindows", "totalInterface", "userInterface", "userList"]
    },
    "Когда можно говорить о начале процесса разработки программного обеспечения?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "когда существует договоренность с заказчиком о цене, сроках и общем предназначении программы": "1",
            "когда утверждено авторское право на данную программу": "0",
            "когда заказчик предоставляет рукописные формы создаваемой программы": "0"
        },
        "answers": ["когда утверждено авторское право на данную программу", "когда существует договоренность с заказчиком о цене, сроках и общем предназначении программы", "когда заказчик предоставляет рукописные формы создаваемой программы"]
    },
    "Как на диаграмме вариантов использования называют прямоугольную рамку, которая окружает все варианты использования, оставляя за своими пределами действующих субъектов?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "диаграммой взаимодействий": "0",
            "ассоциацией": "0",
            "диаграммой действий": "0",
            "границей системы": "1"
        },
        "answers": ["ассоциацией", "диаграммой действий", "границей системы", "диаграммой взаимодействий"]
    },
    "Фаза построения программы начинается":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "с планирования структуры": "1",
            "с написания кода": "0",
            "с описания атрибутов": "0"
        },
        "answers": ["с написания кода", "с планирования структуры", "с описания атрибутов"]
    },
    "Что такое сцепление программного модуля?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "мера его зависимости по данным от других модулей": "1",
            "его независимость от предыстории обращений к нему": "0",
            "мера его внутренних связей": "0"
        },
        "answers": ["его независимость от предыстории обращений к нему", "мера его зависимости по данным от других модулей", "мера его внутренних связей"]
    },
    "Атрибуты (методы) для каждого из классов":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "в основном вырастают из тех существительных, которые сами не стали классами": "1",
            "вырастают напрямую из классов": "0",
            "в основном выделяются из глаголов, которые не стали сообщениями": "0"
        },
        "answers": ["в основном выделяются из глаголов, которые не стали сообщениями", "в основном вырастают из тех существительных, которые сами не стали классами", "вырастают напрямую из классов"]
    },
    "Сколько итераций каждого этапа разработки проектов может понадобиться?":
    {
        "multi": False,
        "iter": 2,
        "result":
        {
            "возможно несколько, в зависимости от нужд пользователя и их представления программистами": "1",
            "не более трех": "0",
            "не более двух": "0"
        },
        "answers": ["не более трех", "возможно несколько, в зависимости от нужд пользователя и их представления программистами", "не более двух"]
    },
    "В каких случаях следует применять хранение самих объектов?":
    {
        "multi": False,
        "iter": 8,
        "result":
        {
            "когда объектов много и они большие": "0",
            "когда объектов мало и они небольшие": "1",
            "когда объектов много и они небольшие": "0",
            "когда объектов мало и они большие": "0"
        },
        "answers": ["когда объектов мало и они небольшие", "когда объектов мало и они большие", "когда объектов много и они большие", "когда объектов много и они небольшие"]
    }
}
