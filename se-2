{
    "Техника сопровождения ПО «Трансформация ПО, в процессе которого ПО реорганизуется с целью улучшения структуры, без изменения ее функционала»:":
    {
        "result":
        {
            "рефакторинг": "1",
            "реинжиниринг": "0",
            "факторинг": "0",
            "обратный реинжиниринг": "0"
        },
        "iter": 8,
        "multi": False,
        "answers": ["рефакторинг", "реинжиниринг", "обратный реинжиниринг", "факторинг"]
    },
    "Какие диаграммы относятся к структурной нотации:":
    {
        "result":
        {
            "диаграммы классов и объектов Class&Object diagram": "1",
            "диаграмма кооперации\nColloboration": "0",
            "диаграмма потоков данных\nData Flow": "0",
            "диаграммы «сущность-связь»\nEntity-relation diagram": "1"
        },
        "iter": 10,
        "multi": true,
        "answers": ["диаграммы классов и объектов Class&Object diagram", "диаграмма потоков данных\nData Flow", "диаграммы «сущность-связь»\nEntity-relation diagram", "диаграмма кооперации\nColloboration"]
    },
    "Какие диаграммы относятся к поведенческой нотации:":
    {
        "result":
        {
            "диаграмма компонентов\nComponent": "0",
            "диаграмма последовательности\nSequence": "1",
            "диаграмма решений\nDecision Tables": "1",
            "диаграмма развертывания\nDeployment": "0"
        },
        "iter": 6,
        "multi": true,
        "answers": ["диаграмма компонентов\nComponent", "диаграмма последовательности\nSequence", "диаграмма решений\nDecision Tables", "диаграмма развертывания\nDeployment"]
    },
    "Знания, конкретизирующие жизненный цикл разработки программных продуктов:":
    {
        "result":
        {
            "управление инженерной деятельностью": "0",
            "тестирование, эксплуатация (поддержка)": "1",
            "инструменты и методы программной инженерии": "0",
            "проектирование, конструирование": "1"
        },
        "iter": 10,
        "multi": true,
        "answers": ["проектирование, конструирование", "инструменты и методы программной инженерии", "тестирование, эксплуатация (поддержка)", "управление инженерной деятельностью"]
    },
    "Уровень тестирования, ориентированный на проверку связей и способов взаимодействия компонентов друг с другом:":
    {
        "result":
        {
            "интеграционное тестирование": "1",
            "тестирование программного продукта": "0",
            "модульное тестирование": "0",
            "компонентное тестирование": "0"
        },
        "iter": 4,
        "multi": False,
        "answers": ["тестирование программного продукта", "интеграционное тестирование", "модульное тестирование", "компонентное тестирование"]
    },
    "Что означает элемент программного продукта «Сложный программный компонент» согласно\nГОСТ 34.003-90:":
    {
        "result":
        {
            "совокупность программных кодов, реализующих сложную функцию бизнес-процесса": "1",
            "совокупность программных кодов, реализующих элементарную функцию бизнес-процесса": "0",
            "совокупность двух или более ПП, в которых функционирование одного из них зависит от результатов функционирования другого": "0",
            "совокупность программных компонент, реализующий конкретный бизнес-процесс": "0"
        },
        "iter": 4,
        "multi": False,
        "answers": ["совокупность программных кодов, реализующих элементарную функцию бизнес-процесса", "совокупность программных кодов, реализующих сложную функцию бизнес-процесса", "совокупность программных компонент, реализующий конкретный бизнес-процесс", "совокупность двух или более ПП, в которых функционирование одного из них зависит от результатов функционирования другого"]
    },
    "С какой точки зрения рассматривается физическая архитектура программного обеспечения:":
    {
        "result":
        {
            "распределенной": "1",
            "статической": "0",
            "динамической": "0",
            "удовлетворение функциональным требованиям": "0"
        },
        "iter": 2,
        "multi": False,
        "answers": ["динамической", "удовлетворение функциональным требованиям", "распределенной", "статической"]
    },
    "Какие из системных требований относятся к атрибутам качества:":
    {
        "result":
        {
            "безотказность": "1",
            "количество запросов в единицу времени": "0",
            "среднее время обработки запроса": "0",
            "надежность": "1"
        },
        "iter": 10,
        "multi": true,
        "answers": ["надежность", "количество запросов в единицу времени", "безотказность", "среднее время обработки запроса"]
    },
    "Какой стиль конструирования используется для точного и однозначного определения компонентов системы:":
    {
        "result":
        {
            "визуальный": "0",
            "лингвистический": "0",
            "формальный": "1",
            "семантический": "0"
        },
        "iter": 8,
        "multi": False,
        "answers": ["формальный", "лингвистический", "визуальный", "семантический"]
    },
    "Какой подход проектирования ПО ориентирован на идентификацию функций и их уточнение «сверху – вниз»:":
    {
        "result":
        {
            "объектно-ориентированное проектирование": "0",
            "функционально-ориентированное проектирование": "1",
            "компонентное проектирование": "0",
            "подход, ориентированный на структуры данных": "0"
        },
        "iter": 2,
        "multi": False,
        "answers": ["объектно-ориентированное проектирование", "компонентное проектирование", "функционально-ориентированное проектирование", "подход, ориентированный на структуры данных"]
    },
    "Как называется тестирование ПО и его компонентов после внесения в них изменений:":
    {
        "result":
        {
            "бета-тестирование": "0",
            "функциональное тестирование": "0",
            "регрессивное тестирование": "1",
            "альфа-тестирование": "0"
        },
        "iter": 2,
        "multi": False,
        "answers": ["альфа-тестирование", "бета-тестирование", "регрессивное тестирование", "функциональное тестирование"]
    },
    "Лица, проявляющие обоснованный интерес к разработке требований к программному продукту:":
    {
        "result":
        {
            "заказчики": "0",
            "инженеры-программисты": "1",
            "инженеры по программному обеспечению": "1",
            "пользователи": "0"
        },
        "iter": 9,
        "multi": true,
        "answers": ["инженеры по программному обеспечению", "пользователи", "заказчики", "инженеры-программисты"]
    },
    "Категория сопровождения ПО «Реактивная» модификация программного продукта, выполняемая после передачи его в эксплуатацию для устранения сбоев»:":
    {
        "result":
        {
            "корректирующее сопровождение": "1",
            "профилактическое сопровождение": "0",
            "совершенствующее сопровождение": "0",
            "адаптирующее сопровождение": "0"
        },
        "iter": 1,
        "multi": False,
        "answers": ["совершенствующее сопровождение", "адаптирующее сопровождение", "профилактическое сопровождение", "корректирующее сопровождение"]
    },
    "Элемент программного продукта, обозначающий совокупность программных компонент, реализующих конкретный бизнес-процесс по ГОСТ 34.003-90, называется:":
    {
        "result":
        {
            "интегрированный программный продукт": "0",
            "программный компонент": "0",
            "программный продукт": "1",
            "сложный программный продукт": "0"
        },
        "iter": 2,
        "multi": False,
        "answers": ["интегрированный программный продукт", "программный компонент", "программный продукт", "сложный программный продукт"]
    },
    "После идентификации источников требований необходимо перейти к сбору требований с использованием методов:":
    {
        "result":
        {
            "дерева целей": "1",
            "методы нечеткой логики": "0",
            "методы нейронных сетей": "0",
            "разработки сценариев": "1"
        },
        "iter": 5,
        "multi": true,
        "answers": ["методы нечеткой логики", "разработки сценариев", "методы нейронных сетей", "дерева целей"]
    },
    "Знания, раскрывающие содержание методов и инструментария разработки программных продуктов:":
    {
        "result":
        {
            "тестирования, эксплуатация (поддержка)": "0",
            "конфигурационное управление": "1",
            "определение требований": "0",
            "качество программного обеспечения": "1"
        },
        "iter": 12,
        "multi": true,
        "answers": ["конфигурационное управление", "качество программного обеспечения", "тестирования, эксплуатация (поддержка)", "определение требований"]
    },
    "Какие требования определяют условия и среду выполнения функций:":
    {
        "result":
        {
            "функциональные требования": "0",
            "системные требования": "0",
            "требования к продукту и процессу": "0",
            "нефункциональные требования": "1"
        },
        "iter": 2,
        "multi": False,
        "answers": ["функциональные требования", "системные требования", "нефункциональные требования", "требования к продукту и процессу"]
    },
    "Какие внешние стандарты интерфейсов компонентов используются в процессе конструирования:":
    {
        "result":
        {
            "CORBA": "0",
            "POSIX": "1",
            "UML": "0",
            "APL": "1"
        },
        "iter": 9,
        "multi": true,
        "answers": ["APL", "CORBA", "UML", "POSIX"]
    },
    "Свод знаний по программной инженерии SWEBOK включает в себя следующие знания:":
    {
        "result":
        {
            "конкретизирующие применения тех или иных языков программирования": "0",
            "конкретизирующие жизненный цикл разработки программных продуктов": "1",
            "раскрывающие содержание методов и инструментария разработки программных продуктов": "1",
            "касающихся использования каких-либо технологий проектирования и разработки ПП": "0"
        },
        "iter": 12,
        "multi": true,
        "answers": ["раскрывающие содержание методов и инструментария разработки программных продуктов", "конкретизирующие жизненный цикл разработки программных продуктов", "конкретизирующие применения тех или иных языков программирования", "касающихся использования каких-либо технологий проектирования и разработки ПП"]
    },
    "Как определяется архитектура программного обеспечения с динамической точки зрения:":
    {
        "result":
        {
            "логическая": "0",
            "физическая": "0",
            "поведенческая": "1",
            "структурная": "0"
        },
        "iter": 8,
        "multi": False,
        "answers": ["поведенческая", "логическая", "физическая", "структурная"]
    }
}